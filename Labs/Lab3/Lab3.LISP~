;Exemplos
(defun entre-intervalo-cond (x)
"Função que verifica se um numero esta entre 10 e 20 (usa o cond)"
 (cond
  ((and (numberp x) (> x 10) (< x 20)) (format t "~d é maior que 10 e menor que 20" x))
  (t (format t "não é um número entre 10 e 20"))
 )
)

(defun entre-intervalo-if (x)
"Função que verifica se um numero esta entre 10 e 20 (usa o if)"
 (if (and (numberp x) (> x 10) (< x 20))
  (format t "~d é maior que 10 e menor que 20" x) ; verdadeiro
  (format t "~d não é um número entre 10 e 20" x) ; falso
 )
)

;1
(defun entre-intervalo (n lista)
"Função que verifica se um numero esta entre dois numeros (usa o cond)"
 (cond
  ((and (numberp n) (> n (first lista)) (< n (second lista))) (format t "~d é maior que ~d e menor que ~d" n (first lista) (second lista)))
  (t (format t "não é um número entre ~d e ~d" (first lista) (second lista)))
 )
)

;2
(defun max-3 (a b c)
"Função que retorna o maior valor entre 3 numeros"
 (cond
  ((and (> a b) (> a c))(format t "~d" a))
  ((and (> b a) (> b c))(format t "~d" b))
  ((and (> c a) (> c b))(format t "~d" c))
 )
)

;3
(defun restop (do dr r)
"Função que verifica se o resto da divisão enter os dois primeiros numeros é igual ao terceiro"
 (cond
  ((= (mod do dr) r) t)
  (t nil)
 )
)

;4
(defun calcula-media-notas (a)
"Função que recebe uma lista de 4 valores e retorna a média"
 (/ (+ (first a) (second a) (third a) (fourth a)) 4)
)

(defun aprovadop (lista)
"Função que verifica se o aluno está aprovado (se a primeira e ultima nota forem maiores que 9,5 ou se a media das 4 notas for 9,5)"
 (cond
  ((and (>= (first lista) 9.5) (>= (fourth lista) 9.5)) t)
  ((>= (calcula-media-notas lista) 9.5)  t)
  (t nil)
 )
)

;5
(defun nota-valida (nota)
"Função que verifica se uma nota é valida (entre 0 e 20)"
 (cond
  ((and (>= nota 0) (<= nota 20)) t)
  (t nil)
 )
)

(defun poderacoes-validas (ponderacoes)
"Função que verifica se as ponderaçóes estam corretas (a soma é 100))"
 (cond
  ((= (+ (first ponderacoes) (second ponderacoes) (third ponderacoes)) 100) t)
  (t nil)
 )
)

(defun nota-final (notas  ponderacoes)
"Função que verifica se o aluno está aprovado (se a primeira e ultima nota forem maiores que 9,5 ou se a media das 4 notas for 9,5)"
 (cond
  ((and (nota-valida (first notas)) (nota-valida (second notas)) (nota-valida (third notas)) (poderacoes-validas ponderacoes)) (+ (* (first notas) (/ (first ponderacoes) 100)) (* (second notas) (/ (second ponderacoes) 100)) (* (third notas) (/ (third ponderacoes) 100))))
  (t nil)
 )
)

;6
(defun produto-somas (lista1  lista2)
"Função que adiciona os membros de duas lista e devolve o produto"
 (* (+ (first lista1) (first lista2)) (+ (second lista1)(second lista2)) (+ (third lista1) (third lista2)))
)

;7
(defun junta-listas-tamanho-igual (lista1  lista2)
"Função que junta duas listas do mesmo tamanho"
 (cond
  ((= (list-length lista1) (list-length lista2)) (append lista1 lista2))
  ((> (list-length lista1) (list-length lista2)) lista1)
  ((< (list-length lista1) (list-length lista2)) lista2)
 )
)

;8
(defun dois-ultimos-elementos (lista)
"Função que retorna os dois ultimos elementos de uma lista"
 (cond
  ((null lista) nil)   
  (t (cons (nth 0 (reverse lista)) (nth 1 (reverse lista))))
 )
)

;9
(defun palindromop (lista)
  (cond
   ((equal lista (reverse lista)) t)
   (t nil)
  )
)

;10
(defun criar-pares (lista1 lista2)
  (cond 
   ((or (/= (list-length lista1) (list-length lista2)) (null lista1) (null lista2)) nil)
   (t ())
  )
)