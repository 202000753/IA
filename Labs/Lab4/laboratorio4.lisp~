;;;; laboratorio4.lisp
;;;; Disciplina de IA - 2022 / 2023
;;;; Laboratorio sobre funcoes recursivas e boas praticas de programacao em Lisp



;;; Exercicio Introdutorio.
;; comprimento de uma lista
;;(comprimento '(1 2 3 4 5)) ;teste a
(defun comprimento(lista)
"Recebe uma lista e retorna um valor inteiro que indica quantos elementos existem nesta lista"
  (cond
   ((null lista) 0)
   (t (1+ (comprimento (cdr lista))))
  )
)

;; tamanho-das-sublistas
(defun tamanho-das-sublistas (lista)
"Recebe uma lista constituida por sublistas e retorna uma lista com valores inteiros que indicadam o comprimento das respetivas sublistas"
  (cond 
    ((null lista) nil)
    (T (cons (comprimento (car lista)) (tamanho-das-sublistas (cdr lista))))
  )
)

;;; Exercicio sobre funcoes recursivas

;; factorial
;;(factorial 10) ;teste fatorial
(defun factorial (n)
  (cond
   ((<= n 1) 1)
   (t (* n (factorial (1- n))))
  )
)

;; n-esimo
;;(n-esimo 3 '(2 5 10 22 30)) ;teste n-esimo
(defun n-esimo (n lista)
  (cond
   ((= 0 n) (car lista))
   (t (n-esimo (1- n) (cdr lista)))
  )
)

;; soma-lista
;;(soma-lista '(1 2 3 3 4 4 5 )) ;teste soma-lista
(defun soma-lista (lista)
  (cond
   ((= 1 (comprimento lista)) (car lista))
   (t (+ (car lista) (soma-lista (cdr lista))))
  )
)

;; existe
;;(existe 3 '(1 2 3 3 4 5)) ;teste existe
(defun existe (n lista)
  (cond
   ((= (car lista) n) lista)
   (t (existe n (cdr lista)))
  )
)
;; junta
;;(junta '(1 (2 3) ) '(3 (4) 5) ) ;teste junta
(defun junta (list1 list2)
  (cond ((null list1) list2)
        (t (cons(car list1) (junta (cdr list1) list2)))
        )
  )

;; inverte
(defun inverte (l)
  (cond
   ((null l) '())
   (T (append (inverte (cdr l)) (list (car l)))))) 

;; conta-atomos
(defun conta-atomos (l)
  (cond ((null l) 0)
        ((atom l) 1)
        (t (+ (conta-atomos (car l))
              (conta-atomos
               (cdr l))))))

;; alisa
(defun alisa (l)
  (cond
   ((atom l) nil)
   (T (apply 'append (list l) (mapcar 'alisa l)))
   )
  )